# Copyright 2025 Lincoln Institute of Land Policy
# SPDX-License-Identifier: MIT

# generated by datamodel-codegen:
#   filename:  https://cwms-data.usace.army.mil/cwms-data/swagger-docs
#   timestamp: 2025-04-07T16:10:15+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, List, Optional, Union

from msgspec import Meta, Struct, field

from . import TimeSeries as TimeSeries_1


class CdaError(Struct):
    message: Optional[str] = None
    incidentIdentifier: Optional[
        Annotated[
            str,
            Meta(
                description="A randomly generated number to help identify your request in the logs for analysis.."
            ),
        ]
    ] = None
    details: Optional[Dict[str, Dict[str, Any]]] = None


class ApiKey(Struct):
    user_id: str = field(name="user-id")
    key_name: str = field(name="key-name")
    api_key: Optional[str] = field(name="api-key", default=None)
    created: Optional[
        Annotated[
            str,
            Meta(
                description="The instant this Key was created, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')"
            ),
        ]
    ] = None
    expires: Optional[
        Annotated[
            str,
            Meta(
                description="When this key expires, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')"
            ),
        ]
    ] = None


class LocationCategory(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    description: Optional[str] = None


class AssignedLocation(Struct):
    location_id: Optional[str] = field(name="location-id", default=None)
    office_id: Optional[str] = field(name="office-id", default=None)
    alias_id: Optional[str] = field(name="alias-id", default=None)
    attribute: Optional[float] = None
    ref_location_id: Optional[str] = field(name="ref-location-id", default=None)


class LocationGroup(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    location_category: Optional[LocationCategory] = field(
        name="location-category", default=None
    )
    description: Optional[str] = None
    shared_loc_alias_id: Optional[str] = field(name="shared-loc-alias-id", default=None)
    shared_ref_location_id: Optional[str] = field(
        name="shared-ref-location-id", default=None
    )
    loc_group_attribute: Optional[float] = field(
        name="loc-group-attribute", default=None
    )
    assigned_locations: Optional[List[AssignedLocation]] = field(
        name="assigned-locations", default=None
    )


class LocationGroupCSV(Struct):
    pass


class CsvV1LocationGroup(Struct):
    pass


class Unit(Struct):
    pass


class Nation(Enum):
    US = "US"
    CANADA = "CANADA"
    MEXICO = "MEXICO"


class Location(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    name: str
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    active: Optional[bool] = None
    public_name: Optional[str] = field(name="public-name", default=None)
    long_name: Optional[str] = field(name="long-name", default=None)
    description: Optional[str] = None
    timezone_name: Optional[str] = field(name="timezone-name", default=None)
    location_type: Optional[str] = field(name="location-type", default=None)
    location_kind: Optional[str] = field(name="location-kind", default=None)
    nation: Optional[Nation] = None
    state_initial: Optional[str] = field(name="state-initial", default=None)
    county_name: Optional[str] = field(name="county-name", default=None)
    nearest_city: Optional[str] = field(name="nearest-city", default=None)
    horizontal_datum: Optional[str] = field(name="horizontal-datum", default=None)
    published_longitude: Optional[float] = field(
        name="published-longitude", default=None
    )
    published_latitude: Optional[float] = field(name="published-latitude", default=None)
    vertical_datum: Optional[str] = field(name="vertical-datum", default=None)
    elevation: Optional[float] = None
    map_label: Optional[str] = field(name="map-label", default=None)
    bounding_office_id: Optional[str] = field(name="bounding-office-id", default=None)
    elevation_units: Optional[str] = field(name="elevation-units", default=None)


class State(Struct):
    state_initial: str = field(name="state-initial")
    name: str


class County(Struct):
    name: str
    county_id: str = field(name="county-id")
    state_initial: str = field(name="state-initial")


class Type(Enum):
    unknown = "unknown"
    corps_headquarters = "corps headquarters"
    division_headquarters = "division headquarters"
    division_regional = "division regional"
    district = "district"
    filed_operating_activity = "filed operating activity"


class Office(Struct):
    name: Optional[str] = None
    long_name: Optional[str] = field(name="long-name", default=None)
    type: Optional[Type] = None
    reports_to: Optional[
        Annotated[
            str,
            Meta(
                description="Reference to another office, like a division, that this office reports to."
            ),
        ]
    ] = field(name="reports-to", default=None)


class Office1(Struct):
    name: Optional[str] = None
    long_name: Optional[str] = field(name="long-name", default=None)
    type: Optional[Type] = None
    reports_to: Optional[
        Annotated[
            str,
            Meta(
                description="Reference to another office, like a division, that this office reports to."
            ),
        ]
    ] = field(name="reports-to", default=None)


class Parameter(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    name: Optional[str] = None
    base_parameter: Optional[str] = field(name="base-parameter", default=None)
    sub_parameter: Optional[str] = field(name="sub-parameter", default=None)
    sub_parameter_description: Optional[str] = field(
        name="sub-parameter-description", default=None
    )
    db_unit_id: Optional[str] = field(name="db-unit-id", default=None)
    unit_long_name: Optional[str] = field(name="unit-long-name", default=None)
    unit_description: Optional[str] = field(name="unit-description", default=None)


class TimeZone(Struct):
    time_zone: str = field(name="time-zone")


class TimeZones(Struct):
    time_zones: Optional[List[TimeZone]] = field(name="time-zones", default=None)


class TimeZoneIds(Struct):
    time_zones: Optional[List[TimeZone]] = field(name="time-zones", default=None)


class ParameterTypeId(Enum):
    Inst = "Inst"
    Ave = "Ave"
    Min = "Min"
    Max = "Max"
    Total = "Total"


class InterpolateString(Enum):
    T = "T"
    F = "F"


class SeasonalValueBean(Struct):
    value: Optional[float] = None
    offset_months: Optional[int] = field(name="offset-months", default=None)
    offset_minutes: Optional[int] = field(name="offset-minutes", default=None)


class Offset(Struct):
    estimate: Optional[bool] = None
    to_datum: Optional[str] = field(name="to-datum", default=None)
    value: Optional[float] = None


class DateVersionType(Enum):
    MAX_AGGREGATE = "MAX_AGGREGATE"
    SINGLE_VERSION = "SINGLE_VERSION"
    UNVERSIONED = "UNVERSIONED"


class Duration(Struct):
    seconds: Optional[int] = None
    zero: Optional[bool] = None
    nano: Optional[int] = None
    negative: Optional[bool] = None


class Unit1(Struct):
    duration: Optional[Duration] = None
    durationEstimated: Optional[bool] = None
    dateBased: Optional[bool] = None
    timeBased: Optional[bool] = None


class Interval(Struct):
    seconds: Optional[int] = None
    units: Optional[List[Unit1]] = None
    zero: Optional[bool] = None
    nano: Optional[int] = None
    negative: Optional[bool] = None


class Value(Struct):
    date_time: Optional[
        Annotated[
            int,
            Meta(description="Milliseconds since 1970-01-01 (Unix Epoch), always UTC"),
        ]
    ] = field(name="date-time", default=None)
    value: Optional[
        Annotated[float, Meta(description="Requested time-series data value")]
    ] = None
    quality_code: Optional[int] = field(name="quality-code", default=None)


class VerticalDatumInfo(Struct):
    office: Optional[str] = None
    unit: Optional[str] = None
    location: Optional[str] = None
    native_datum: Optional[str] = field(name="native-datum", default=None)
    elevation: Optional[float] = None
    offsets: Optional[List[Offset]] = None


class Unit2(Struct):
    duration: Optional[Duration] = None
    durationEstimated: Optional[bool] = None
    dateBased: Optional[bool] = None
    timeBased: Optional[bool] = None


class Interval1(Struct):
    seconds: Optional[int] = None
    units: Optional[List[Unit2]] = None
    zero: Optional[bool] = None
    nano: Optional[int] = None
    negative: Optional[bool] = None


class TimeSeries(Struct):
    units: Annotated[str, Meta(description="The units of the time series data")]
    begin: Optional[
        Annotated[
            str,
            Meta(
                description="The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')"
            ),
        ]
    ] = None
    date_version_type: Optional[
        Annotated[
            DateVersionType,
            Meta(
                description="Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified."
            ),
        ]
    ] = field(name="date-version-type", default=None)
    end: Optional[
        Annotated[
            str,
            Meta(
                description="The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')"
            ),
        ]
    ] = None
    interval: Optional[
        Annotated[
            Interval1,
            Meta(
                description="The interval of the time-series, in ISO-8601 duration format"
            ),
        ]
    ] = None
    interval_offset: Optional[
        Annotated[int, Meta(description="Offset from top of interval")]
    ] = field(name="interval-offset", default=None)
    name: Optional[Annotated[str, Meta(description="Time-series name")]] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    office_id: Optional[
        Annotated[str, Meta(description="Office ID that owns the time-series")]
    ] = field(name="office-id", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    time_zone: Optional[
        Annotated[
            str,
            Meta(
                description="Only on 21.1.1 Database. The timezone the Interval Offset is from."
            ),
        ]
    ] = field(name="time-zone", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None
    value_columns: Optional[List[TimeSeries_1.Column]] = field(
        name="value-columns", default=None
    )
    values: Optional[List[List[Value]]] = None
    version_date: Optional[
        Annotated[str, Meta(description="The version date of the time series trace")]
    ] = field(name="version-date", default=None)
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )


class UnitSystem(Enum):
    SI = "SI"
    EN = "EN"


class TsvId(Struct):
    tsCode: Optional[int] = None
    dateTime: Optional[str] = None
    versionDate: Optional[str] = None
    dataEntryDate: Optional[str] = None


class StandardTextId(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None


class StandardTextValue(Struct):
    id: Optional[StandardTextId] = None
    standard_text: Optional[str] = field(name="standard-text", default=None)


class StandardTextCatalog(Struct):
    values: Optional[List[StandardTextValue]] = None


class DeleteMethod(Enum):
    DELETE_ALL = "DELETE_ALL"
    DELETE_KEY = "DELETE_KEY"
    DELETE_DATA = "DELETE_DATA"


class RegularTextTimeSeriesRow(Struct):
    date_time: Optional[str] = field(name="date-time", default=None)
    data_entry_date: Optional[str] = field(name="data-entry-date", default=None)
    text_value: Optional[str] = field(name="text-value", default=None)
    filename: Optional[str] = None
    media_type: Optional[str] = field(name="media-type", default=None)
    quality_code: Optional[int] = field(name="quality-code", default=None)
    dest_flag: Optional[int] = field(name="dest-flag", default=None)
    value_url: Optional[str] = field(name="value-url", default=None)


class TextTimeSeries(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    name: Optional[str] = None
    interval_offset: Optional[int] = field(name="interval-offset", default=None)
    time_zone: Optional[str] = field(name="time-zone", default=None)
    date_version_type: Optional[
        Annotated[
            DateVersionType,
            Meta(
                description="Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified."
            ),
        ]
    ] = field(name="date-version-type", default=None)
    version_date: Optional[
        Annotated[str, Meta(description="The version date of the time series trace")]
    ] = field(name="version-date", default=None)
    regular_text_values: Optional[List[RegularTextTimeSeriesRow]] = field(
        name="regular-text-values", default=None
    )


class BinaryTimeSeriesRow(Struct):
    date_time: Optional[str] = field(name="date-time", default=None)
    data_entry_date: Optional[str] = field(name="data-entry-date", default=None)
    media_type: Optional[str] = field(name="media-type", default=None)
    filename: Optional[str] = None
    dest_flag: Optional[int] = field(name="dest-flag", default=None)
    binary_value: Optional[str] = field(name="binary-value", default=None)
    value_url: Optional[str] = field(name="value-url", default=None)
    quality_code: Optional[int] = field(name="quality-code", default=None)


class CwmsId(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    name: Optional[str] = None


class TimeSeriesProfile(Struct):
    location_id: Optional[CwmsId] = field(name="location-id", default=None)
    description: Optional[Annotated[str, Meta(description="Description")]] = None
    parameter_list: Optional[
        Annotated[List[str], Meta(description="Dependent Parameters")]
    ] = field(name="parameter-list", default=None)
    key_parameter: Optional[
        Annotated[str, Meta(description="Independent Parameter")]
    ] = field(name="key-parameter", default=None)
    reference_ts_id: Optional[CwmsId] = field(name="reference-ts-id", default=None)


class TimeSeriesProfileList(Struct):
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    profile_list: Optional[List[TimeSeriesProfile]] = field(
        name="profile-list", default=None
    )
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class ParameterInfo(Struct):
    type: str
    parameter: Optional[str] = None
    unit: Optional[str] = None
    parameterInfoString: Optional[str] = None


class ParameterInfoColumnar(ParameterInfo):
    start_column: Optional[int] = field(name="start-column", default=None)
    end_column: Optional[int] = field(name="end-column", default=None)


class ParameterInfoIndexed(ParameterInfo):
    index: Optional[int] = None


class TimeSeriesProfileParser(Struct):
    location_id: Optional[CwmsId] = field(name="location-id", default=None)
    key_parameter: Optional[str] = field(name="key-parameter", default=None)
    record_delimiter: Optional[str] = field(name="record-delimiter", default=None)
    time_format: Optional[str] = field(name="time-format", default=None)
    time_zone: Optional[str] = field(name="time-zone", default=None)
    parameter_info_list: Optional[List[ParameterInfo]] = field(
        name="parameter-info-list", default=None
    )
    time_in_two_fields: Optional[bool] = field(name="time-in-two-fields", default=None)
    type: Optional[str] = None


class TimeSeriesProfileParserColumnar(TimeSeriesProfileParser):
    time_start_column: Optional[int] = field(name="time-start-column", default=None)
    time_end_column: Optional[int] = field(name="time-end-column", default=None)


# class TimeSeriesProfileParserIndexed(TimeSeriesProfileParser):
#     field_delimiter: str = field(name='field-delimiter')
#     time_field: int = field(name='time-field')


class DataColumnInfo(Struct):
    name: Optional[str] = None
    ordinal: Optional[int] = None
    datatype: Optional[str] = None


class ParameterColumnInfo(Struct):
    parameter: Optional[str] = None
    ordinal: Optional[int] = None
    unit: Optional[str] = None


class TimeSeriesData(Struct):
    value: Optional[float] = None
    quality: Optional[int] = None


class TimeSeriesProfileInstance(Struct):
    data_columns: Optional[List[DataColumnInfo]] = field(
        name="data-columns", default=None
    )
    first_date: Optional[str] = field(name="first-date", default=None)
    last_date: Optional[str] = field(name="last-date", default=None)
    location_time_zone: Optional[str] = field(name="location-time-zone", default=None)
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_first_date: Optional[str] = field(name="page-first-date", default=None)
    page_last_date: Optional[str] = field(name="page-last-date", default=None)
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    parameter_columns: Optional[List[ParameterColumnInfo]] = field(
        name="parameter-columns", default=None
    )
    time_series_list: Optional[Dict[str, List[TimeSeriesData]]] = field(
        name="time-series-list", default=None
    )
    time_series_profile: Optional[TimeSeriesProfile] = field(
        name="time-series-profile", default=None
    )
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None
    version: Optional[str] = None
    version_date: Optional[str] = field(name="version-date", default=None)


class StoreRule(Enum):
    REPLACE_ALL = "REPLACE ALL"
    DO_NOT_REPLACE = "DO NOT REPLACE"
    REPLACE_MISSING_VALUES_ONLY = "REPLACE MISSING VALUES ONLY"
    REPLACE_WITH_NON_MISSING = "REPLACE WITH NON MISSING"
    DELETE_INSERT = "DELETE INSERT"


class TimeseriesCategory(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    description: Optional[str] = None


class TimeSeriesCategory(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    description: Optional[str] = None


class TimeSeriesIdentifierDescriptor(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    time_series_id: Optional[str] = field(name="time-series-id", default=None)
    timezone_name: Optional[str] = field(name="timezone-name", default=None)
    interval_offset_minutes: Optional[int] = field(
        name="interval-offset-minutes", default=None
    )
    active: Optional[bool] = None


class TimeSeriesIdentifierDescriptors(Struct):
    descriptors: Optional[List[TimeSeriesIdentifierDescriptor]] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class AssignedTimeSeries(Struct):
    officeId: Optional[str] = None
    timeseriesId: Optional[str] = None
    aliasId: Optional[str] = None
    refTsId: Optional[str] = None
    attribute: Optional[int] = None


class TimeseriesGroup(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    time_series_category: Optional[TimeseriesCategory] = field(
        name="time-series-category", default=None
    )
    description: Optional[str] = None
    shared_alias_id: Optional[str] = field(name="shared-alias-id", default=None)
    shared_ref_ts_id: Optional[str] = field(name="shared-ref-ts-id", default=None)
    assigned_time_series: Optional[List[AssignedTimeSeries]] = field(
        name="assigned-time-series", default=None
    )


class TimeSeriesGroup(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    time_series_category: Optional[TimeseriesCategory] = field(
        name="time-series-category", default=None
    )
    description: Optional[str] = None
    shared_alias_id: Optional[str] = field(name="shared-alias-id", default=None)
    shared_ref_ts_id: Optional[str] = field(name="shared-ref-ts-id", default=None)
    assigned_time_series: Optional[List[AssignedTimeSeries]] = field(
        name="assigned-time-series", default=None
    )


class ParameterSpec(Struct):
    parameter: Optional[str] = None
    in_range_method: Optional[str] = field(name="in-range-method", default=None)
    out_range_low_method: Optional[str] = field(
        name="out-range-low-method", default=None
    )
    out_range_high_method: Optional[str] = field(
        name="out-range-high-method", default=None
    )


class RatingTemplate(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    version: Optional[str] = None
    description: Optional[str] = None
    dependent_parameter: Optional[str] = field(name="dependent-parameter", default=None)
    independent_parameter_specs: Optional[List[ParameterSpec]] = field(
        name="independent-parameter-specs", default=None
    )
    rating_ids: Optional[List[str]] = field(name="rating-ids", default=None)


class RatingTemplates(Struct):
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    templates: Optional[List[RatingTemplate]] = None
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class IndependentRoundingSpec(Struct):
    position: Optional[int] = None
    value: Optional[str] = None


class RatingSpec(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    rating_id: Optional[str] = field(name="rating-id", default=None)
    template_id: Optional[str] = field(name="template-id", default=None)
    location_id: Optional[str] = field(name="location-id", default=None)
    version: Optional[str] = None
    source_agency: Optional[str] = field(name="source-agency", default=None)
    in_range_method: Optional[str] = field(name="in-range-method", default=None)
    out_range_low_method: Optional[str] = field(
        name="out-range-low-method", default=None
    )
    out_range_high_method: Optional[str] = field(
        name="out-range-high-method", default=None
    )
    active: Optional[bool] = None
    auto_update: Optional[bool] = field(name="auto-update", default=None)
    auto_activate: Optional[bool] = field(name="auto-activate", default=None)
    auto_migrate_extension: Optional[bool] = field(
        name="auto-migrate-extension", default=None
    )
    independent_rounding_specs: Optional[List[IndependentRoundingSpec]] = field(
        name="independent-rounding-specs", default=None
    )
    dependent_rounding_spec: Optional[str] = field(
        name="dependent-rounding-spec", default=None
    )
    description: Optional[str] = None
    effective_dates: Optional[List[str]] = field(name="effective-dates", default=None)


class RatingSpecs(Struct):
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    specs: Optional[List[RatingSpec]] = None
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class SourceRating(Struct):
    pass


class DatabaseLoadMethod(Enum):
    EAGER = "EAGER"
    LAZY = "LAZY"
    REFERENCE = "REFERENCE"


class CatalogableEndpoint(Enum):
    TIMESERIES = "TIMESERIES"
    LOCATIONS = "LOCATIONS"


class TimeSeriesExtents(Struct):
    earliest_time: Optional[
        Annotated[str, Meta(description="Earliest value in the timeseries")]
    ] = field(name="earliest-time", default=None)
    latest_time: Optional[
        Annotated[str, Meta(description="Latest value in the timeseries")]
    ] = field(name="latest-time", default=None)
    version_time: Optional[
        Annotated[
            str,
            Meta(
                description="TimeSeries version to which this extent information applies"
            ),
        ]
    ] = field(name="version-time", default=None)
    last_update: Optional[
        Annotated[str, Meta(description="Last update in the timeseries")]
    ] = field(name="last-update", default=None)


class TimeseriesCatalogEntry(Struct):
    office: Optional[str] = None
    name: Optional[str] = None
    units: Optional[str] = None
    interval: Optional[str] = None
    interval_offset: Optional[
        Annotated[int, Meta(description="Offset from top of interval")]
    ] = field(name="interval-offset", default=None)
    time_zone: Optional[
        Annotated[
            str,
            Meta(
                description="Only on 21.1.1 Database. The timezone the Interval Offset is from."
            ),
        ]
    ] = field(name="time-zone", default=None)
    extents: Optional[List[TimeSeriesExtents]] = None


class Alias(Struct):
    name: Optional[str] = None
    value: Optional[str] = None


class Basin(Struct):
    basin_id: CwmsId = field(name="basin-id")
    sort_order: Optional[float] = field(name="sort-order", default=None)
    total_drainage_area: Optional[float] = field(
        name="total-drainage-area", default=None
    )
    contributing_drainage_area: Optional[float] = field(
        name="contributing-drainage-area", default=None
    )
    parent_basin_id: Optional[CwmsId] = field(name="parent-basin-id", default=None)
    area_unit: Optional[str] = field(name="area-unit", default=None)
    primary_stream_id: Optional[CwmsId] = field(name="primary-stream-id", default=None)


class Bank(Enum):
    L = "L"
    R = "R"


class StreamNode(Struct):
    stream_id: CwmsId = field(name="stream-id")
    bank: Optional[Bank] = None
    station: Optional[float] = None
    station_units: Optional[str] = field(name="station-units", default=None)


class StreamLocationNode(Struct):
    id: CwmsId
    stream_node: StreamNode = field(name="stream-node")


class TimeExtents(Struct):
    earliest_time: Optional[
        Annotated[str, Meta(description="Earliest value in the timeseries")]
    ] = field(name="earliest-time", default=None)
    latest_time: Optional[
        Annotated[str, Meta(description="Latest value in the timeseries")]
    ] = field(name="latest-time", default=None)


class StreamflowMeasurement(Struct):
    gage_height: Optional[float] = field(name="gage-height", default=None)
    flow: Optional[float] = None
    quality: Optional[str] = None


class SupplementalStreamflowMeasurement(Struct):
    channel_flow: Optional[float] = field(name="channel-flow", default=None)
    overbank_flow: Optional[float] = field(name="overbank-flow", default=None)
    overbank_max_depth: Optional[float] = field(name="overbank-max-depth", default=None)
    channel_max_depth: Optional[float] = field(name="channel-max-depth", default=None)
    avg_velocity: Optional[float] = field(name="avg-velocity", default=None)
    surface_velocity: Optional[float] = field(name="surface-velocity", default=None)
    max_velocity: Optional[float] = field(name="max-velocity", default=None)
    effective_flow_area: Optional[float] = field(
        name="effective-flow-area", default=None
    )
    cross_sectional_area: Optional[float] = field(
        name="cross-sectional-area", default=None
    )
    mean_gage: Optional[float] = field(name="mean-gage", default=None)
    top_width: Optional[float] = field(name="top-width", default=None)
    main_channel_area: Optional[float] = field(name="main-channel-area", default=None)
    overbank_area: Optional[float] = field(name="overbank-area", default=None)


class UsgsMeasurement(Struct):
    remarks: Optional[str] = None
    current_rating: Optional[str] = field(name="current-rating", default=None)
    control_condition: Optional[str] = field(name="control-condition", default=None)
    shift_used: Optional[float] = field(name="shift-used", default=None)
    percent_difference: Optional[float] = field(name="percent-difference", default=None)
    flow_adjustment: Optional[str] = field(name="flow-adjustment", default=None)
    delta_height: Optional[float] = field(name="delta-height", default=None)
    delta_time: Optional[float] = field(name="delta-time", default=None)
    air_temp: Optional[float] = field(name="air-temp", default=None)
    water_temp: Optional[float] = field(name="water-temp", default=None)


class Blob(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: str
    value: str
    description: Optional[str] = None
    media_type_id: Optional[str] = field(name="media-type-id", default=None)


class Blobs(Struct):
    blobs: Optional[
        Annotated[List[Blob], Meta(description="List of retrieved blobs")]
    ] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class Clob(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: str
    description: Optional[str] = None
    value: Optional[str] = None


class Clobs(Struct):
    clobs: Optional[
        Annotated[List[Clob], Meta(description="List of retrieved clobs")]
    ] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class PoolNameType(Struct):
    officeId: Optional[str] = None
    poolName: Optional[str] = None


class SpecifiedLevel(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    id: Optional[str] = None
    description: Optional[str] = None


class ForecastSpec(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    spec_id: Optional[Annotated[str, Meta(description="Forecast Spec ID")]] = field(
        name="spec-id", default=None
    )
    designator: Optional[Annotated[str, Meta(description="Forecast Designator")]] = None
    location_id: Optional[Annotated[str, Meta(description="Location IDs")]] = field(
        name="location-id", default=None
    )
    source_entity_id: Optional[Annotated[str, Meta(description="Source Entity ID")]] = (
        field(name="source-entity-id", default=None)
    )
    description: Optional[
        Annotated[str, Meta(description="Description of Forecast")]
    ] = None
    time_series_ids: Optional[
        Annotated[
            List[str],
            Meta(description="List of Time Series IDs belonging to this Forecast Spec"),
        ]
    ] = field(name="time-series-ids", default=None)


class ForecastInstance(Struct):
    spec: Optional[ForecastSpec] = None
    date_time: Optional[str] = field(name="date-time", default=None)
    issue_date_time: Optional[str] = field(name="issue-date-time", default=None)
    first_date_time: Optional[str] = field(name="first-date-time", default=None)
    last_date_time: Optional[str] = field(name="last-date-time", default=None)
    max_age: Optional[int] = field(name="max-age", default=None)
    notes: Optional[Annotated[str, Meta(description="Forecast Instance Notes")]] = None
    metadata: Optional[Dict[str, str]] = None
    filename: Optional[Annotated[str, Meta(description="Forecast Filename")]] = None
    file_description: Optional[
        Annotated[str, Meta(description="Description of Forecast File")]
    ] = field(name="file-description", default=None)
    file_media_type: Optional[
        Annotated[str, Meta(description="Forecast File Media Type")]
    ] = field(name="file-media-type", default=None)
    file_data: Optional[
        Annotated[str, Meta(description="Forecast File binary data")]
    ] = field(name="file-data", default=None)
    file_data_url: Optional[
        Annotated[str, Meta(description="Link to Forecast File binary data")]
    ] = field(name="file-data-url", default=None)


class LookupType(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    display_value: str = field(name="display-value")
    tooltip: Optional[str] = None
    active: Optional[bool] = None


class WaterUser(Struct):
    entity_name: str = field(name="entity-name")
    project_id: CwmsId = field(name="project-id")
    water_right: str = field(name="water-right")


class PumpType(Enum):
    IN = "IN"
    OUT = "OUT"
    BELOW = "BELOW"


class WaterSupplyPump(Struct):
    pumpLocation: Location
    pumpType: PumpType


class PumpLocation(Struct):
    pump_in: Optional[CwmsId] = field(name="pump-in", default=None)
    pump_out: Optional[CwmsId] = field(name="pump-out", default=None)
    pump_below: Optional[CwmsId] = field(name="pump-below", default=None)


class PumpTransfer(Struct):
    pump_type: PumpType = field(name="pump-type")
    transfer_type_display: str = field(name="transfer-type-display")
    flow: float
    comment: str


class WaterSupplyAccounting(Struct):
    contract_name: str = field(name="contract-name")
    water_user: WaterUser = field(name="water-user")
    pump_locations: PumpLocation = field(name="pump-locations")
    pump_accounting: Optional[Dict[str, List[PumpTransfer]]] = field(
        name="pump-accounting", default=None
    )


class Embankment(Struct):
    project_id: CwmsId = field(name="project-id")
    location: Location
    structure_type: Optional[LookupType] = field(name="structure-type", default=None)
    upstream_side_slope: Optional[float] = field(
        name="upstream-side-slope", default=None
    )
    downstream_side_slope: Optional[float] = field(
        name="downstream-side-slope", default=None
    )
    structure_length: Optional[float] = field(name="structure-length", default=None)
    max_height: Optional[float] = field(name="max-height", default=None)
    top_width: Optional[float] = field(name="top-width", default=None)
    length_units: Optional[str] = field(name="length-units", default=None)
    downstream_protection_type: Optional[LookupType] = field(
        name="downstream-protection-type", default=None
    )
    upstream_protection_type: Optional[LookupType] = field(
        name="upstream-protection-type", default=None
    )


class Turbine(Struct):
    project_id: CwmsId = field(name="project-id")
    location: Location


class LockLocationLevelRef(Struct):
    level_link: Optional[str] = field(name="level-link", default=None)
    level_value: Optional[float] = field(name="level-value", default=None)


class TurbineSetting(Struct):
    location_id: CwmsId = field(name="location-id")
    discharge_units: str = field(name="discharge-units")
    old_discharge: float = field(name="old-discharge")
    new_discharge: float = field(name="new-discharge")
    generation_units: str = field(name="generation-units")
    scheduled_load: Optional[float] = field(name="scheduled-load", default=None)
    real_power: Optional[float] = field(name="real-power", default=None)


class Outlet(Struct):
    project_id: CwmsId = field(name="project-id")
    location: Location
    rating_group_id: Optional[CwmsId] = field(name="rating-group-id", default=None)
    rating_spec_id: Optional[str] = field(name="rating-spec-id", default=None)
    rating_category_id: Optional[CwmsId] = field(
        name="rating-category-id", default=None
    )


class GateSetting(Struct):
    location_id: CwmsId = field(name="location-id")
    opening: float
    opening_parameter: str = field(name="opening-parameter")
    opening_units: str = field(name="opening-units")
    invert_elevation: float = field(name="invert-elevation")
    type: Optional[str] = None


class VirtualOutletRecord(Struct):
    outlet_id: CwmsId = field(name="outlet-id")
    downstream_outlet_ids: Optional[List[CwmsId]] = field(
        name="downstream-outlet-ids", default=None
    )


class Kind(Enum):
    EMBANKMENT = "EMBANKMENT"
    TURBINE = "TURBINE"
    OUTLET = "OUTLET"
    LOCK = "LOCK"
    GATE = "GATE"


class LocationsWithProjectKind(Struct):
    kind: Optional[Kind] = None
    location_ids: Optional[List[CwmsId]] = field(name="location-ids", default=None)


class ProjectChildLocations(Struct):
    project_id: Optional[CwmsId] = field(name="project-id", default=None)
    locations_by_kind: Optional[List[LocationsWithProjectKind]] = field(
        name="locations-by-kind", default=None
    )


class Project(Struct):
    location: Optional[Location] = None
    federal_cost: Optional[float] = field(name="federal-cost", default=None)
    non_federal_cost: Optional[float] = field(name="non-federal-cost", default=None)
    cost_year: Optional[str] = field(name="cost-year", default=None)
    cost_unit: Optional[str] = field(name="cost-unit", default=None)
    federal_o_and_m_cost: Optional[float] = field(
        name="federal-o-and-m-cost", default=None
    )
    non_federal_o_and_m_cost: Optional[float] = field(
        name="non-federal-o-and-m-cost", default=None
    )
    authorizing_law: Optional[str] = field(name="authorizing-law", default=None)
    project_owner: Optional[str] = field(name="project-owner", default=None)
    hydropower_desc: Optional[str] = field(name="hydropower-desc", default=None)
    sedimentation_desc: Optional[str] = field(name="sedimentation-desc", default=None)
    downstream_urban_desc: Optional[str] = field(
        name="downstream-urban-desc", default=None
    )
    bank_full_capacity_desc: Optional[str] = field(
        name="bank-full-capacity-desc", default=None
    )
    pump_back_location: Optional[Location] = field(
        name="pump-back-location", default=None
    )
    near_gage_location: Optional[Location] = field(
        name="near-gage-location", default=None
    )
    yield_time_frame_start: Optional[str] = field(
        name="yield-time-frame-start", default=None
    )
    yield_time_frame_end: Optional[str] = field(
        name="yield-time-frame-end", default=None
    )
    project_remarks: Optional[str] = field(name="project-remarks", default=None)


class Projects(Struct):
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    projects: Optional[List[Project]] = None
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class Property(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    category: str
    name: str
    value: Optional[str] = None
    comment: Optional[str] = None


class ProjectLock(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    project_id: Optional[str] = field(name="project-id", default=None)
    application_id: Optional[str] = field(name="application-id", default=None)
    acquire_time: Optional[str] = field(name="acquire-time", default=None)
    session_user: Optional[str] = field(name="session-user", default=None)
    os_user: Optional[str] = field(name="os-user", default=None)
    session_program: Optional[str] = field(name="session-program", default=None)
    session_machine: Optional[str] = field(name="session-machine", default=None)


class ProjectLockId(Struct):
    id: Optional[str] = None


class LockRevokerRights(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    project_id: Optional[str] = field(name="project-id", default=None)
    application_id: Optional[str] = field(name="application-id", default=None)
    user_id: Optional[str] = field(name="user-id", default=None)


class OfficesFMT(Struct):
    offices: Optional[List[Office]] = None


class LocationLevel(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    location_level_id: Annotated[
        str, Meta(description="Name of the location level")
    ] = field(name="location-level-id")
    seasonal_time_series_id: Optional[
        Annotated[
            str,
            Meta(
                description="Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue"
            ),
        ]
    ] = field(name="seasonal-time-series-id", default=None)
    specified_level_id: Optional[
        Annotated[
            str,
            Meta(
                description="Generic name of this location level. Common names are 'Top of Dam', 'Streambed', 'Bottom of Dam'."
            ),
        ]
    ] = field(name="specified-level-id", default=None)
    parameter_type_id: Optional[
        Annotated[
            ParameterTypeId,
            Meta(description="To indicate if single or aggregate value"),
        ]
    ] = field(name="parameter-type-id", default=None)
    parameter_id: Optional[
        Annotated[
            str, Meta(description="Data Type such as Stage, Elevation, or others.")
        ]
    ] = field(name="parameter-id", default=None)
    constant_value: Optional[
        Annotated[
            float,
            Meta(
                description="Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues."
            ),
        ]
    ] = field(name="constant-value", default=None)
    level_units_id: Optional[
        Annotated[str, Meta(description="Units the provided levels are in")]
    ] = field(name="level-units-id", default=None)
    level_date: Optional[
        Annotated[
            str,
            Meta(
                description="The date/time at which this location level configuration takes effect."
            ),
        ]
    ] = field(name="level-date", default=None)
    level_comment: Optional[str] = field(name="level-comment", default=None)
    interval_origin: Optional[
        Annotated[str, Meta(description="The start point of provided seasonal values")]
    ] = field(name="interval-origin", default=None)
    interval_months: Optional[int] = field(name="interval-months", default=None)
    interval_minutes: Optional[int] = field(name="interval-minutes", default=None)
    interpolate_string: Optional[
        Annotated[
            InterpolateString,
            Meta(
                description="Indicating whether or not to interpolate between seasonal values."
            ),
        ]
    ] = field(name="interpolate-string", default=None)
    duration_id: Optional[
        Annotated[
            str,
            Meta(
                description="0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value."
            ),
        ]
    ] = field(name="duration-id", default=None)
    attribute_value: Optional[float] = field(name="attribute-value", default=None)
    attribute_units_id: Optional[str] = field(name="attribute-units-id", default=None)
    attribute_parameter_type_id: Optional[str] = field(
        name="attribute-parameter-type-id", default=None
    )
    attribute_parameter_id: Optional[str] = field(
        name="attribute-parameter-id", default=None
    )
    attribute_duration_id: Optional[str] = field(
        name="attribute-duration-id", default=None
    )
    attribute_comment: Optional[str] = field(name="attribute-comment", default=None)
    seasonal_values: Optional[
        Annotated[
            List[SeasonalValueBean],
            Meta(
                description="List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue"
            ),
        ]
    ] = field(name="seasonal-values", default=None)


class LocationLevels(Struct):
    levels: Optional[
        Annotated[
            List[LocationLevel], Meta(description="List of retrieved location levels")
        ]
    ] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class Timeseries(Struct):
    units: Annotated[str, Meta(description="The units of the time series data")]
    begin: Optional[
        Annotated[
            str,
            Meta(
                description="The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')"
            ),
        ]
    ] = None
    date_version_type: Optional[
        Annotated[
            DateVersionType,
            Meta(
                description="Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified."
            ),
        ]
    ] = field(name="date-version-type", default=None)
    end: Optional[
        Annotated[
            str,
            Meta(
                description="The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')"
            ),
        ]
    ] = None
    interval: Optional[
        Annotated[
            Interval,
            Meta(
                description="The interval of the time-series, in ISO-8601 duration format"
            ),
        ]
    ] = None
    interval_offset: Optional[
        Annotated[int, Meta(description="Offset from top of interval")]
    ] = field(name="interval-offset", default=None)
    name: Optional[Annotated[str, Meta(description="Time-series name")]] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    office_id: Optional[
        Annotated[str, Meta(description="Office ID that owns the time-series")]
    ] = field(name="office-id", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    time_zone: Optional[
        Annotated[
            str,
            Meta(
                description="Only on 21.1.1 Database. The timezone the Interval Offset is from."
            ),
        ]
    ] = field(name="time-zone", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None
    value_columns: Optional[List[TimeSeries_1.Column]] = field(
        name="value-columns", default=None
    )
    values: Optional[List[List[Value]]] = None
    version_date: Optional[
        Annotated[str, Meta(description="The version date of the time series trace")]
    ] = field(name="version-date", default=None)
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )


class Tsv(Struct):
    id: Optional[TsvId] = None
    value: Optional[float] = None
    qualityCode: Optional[int] = None
    startDate: Optional[str] = None
    endDate: Optional[str] = None


class BinaryTimeSeries(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    name: Optional[str] = None
    interval_offset: Optional[int] = field(name="interval-offset", default=None)
    time_zone: Optional[str] = field(name="time-zone", default=None)
    date_version_type: Optional[
        Annotated[
            DateVersionType,
            Meta(
                description="Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified."
            ),
        ]
    ] = field(name="date-version-type", default=None)
    version_date: Optional[
        Annotated[str, Meta(description="The version date of the time series trace")]
    ] = field(name="version-date", default=None)
    binary_values: Optional[List[BinaryTimeSeriesRow]] = field(
        name="binary-values", default=None
    )


class CatalogEntry2(TimeseriesCatalogEntry):
    office: Optional[str] = None


class LocationCatalogEntry(Struct):
    office: Optional[str] = None
    name: Optional[str] = None
    nearest_city: Optional[str] = field(name="nearest-city", default=None)
    public_name: Optional[str] = field(name="public-name", default=None)
    long_name: Optional[str] = field(name="long-name", default=None)
    description: Optional[str] = None
    kind: Optional[str] = None
    type: Optional[str] = None
    time_zone: Optional[str] = field(name="time-zone", default=None)
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    published_latitude: Optional[float] = field(name="published-latitude", default=None)
    published_longitude: Optional[float] = field(
        name="published-longitude", default=None
    )
    horizontal_datum: Optional[str] = field(name="horizontal-datum", default=None)
    elevation: Optional[float] = None
    unit: Optional[str] = None
    vertical_datum: Optional[str] = field(name="vertical-datum", default=None)
    nation: Optional[str] = None
    state: Optional[str] = None
    county: Optional[str] = None
    bounding_office: Optional[str] = field(name="bounding-office", default=None)
    map_label: Optional[str] = field(name="map-label", default=None)
    active: Optional[bool] = None
    aliases: Optional[List[Alias]] = None


class Stream(Struct):
    id: CwmsId
    starts_downstream: Optional[bool] = field(name="starts-downstream", default=None)
    flows_into_stream_node: Optional[StreamNode] = field(
        name="flows-into-stream-node", default=None
    )
    diverts_from_stream_node: Optional[StreamNode] = field(
        name="diverts-from-stream-node", default=None
    )
    length: Optional[float] = None
    average_slope: Optional[float] = field(name="average-slope", default=None)
    length_units: Optional[str] = field(name="length-units", default=None)
    slope_units: Optional[str] = field(name="slope-units", default=None)
    comment: Optional[str] = None


class StreamLocation(Struct):
    stream_location_node: StreamLocationNode = field(name="stream-location-node")
    published_station: Optional[float] = field(name="published-station", default=None)
    navigation_station: Optional[float] = field(name="navigation-station", default=None)
    lowest_measurable_stage: Optional[float] = field(
        name="lowest-measurable-stage", default=None
    )
    total_drainage_area: Optional[float] = field(
        name="total-drainage-area", default=None
    )
    ungaged_drainage_area: Optional[float] = field(
        name="ungaged-drainage-area", default=None
    )
    area_units: Optional[str] = field(name="area-units", default=None)
    stage_units: Optional[str] = field(name="stage-units", default=None)


class StreamReach(Struct):
    downstream_node: StreamLocationNode = field(name="downstream-node")
    upstream_node: StreamLocationNode = field(name="upstream-node")
    stream_id: CwmsId = field(name="stream-id")
    id: CwmsId
    comment: Optional[str] = None
    configuration_id: Optional[CwmsId] = field(name="configuration-id", default=None)


class CwmsIdTimeExtentsEntry(Struct):
    id: Optional[CwmsId] = None
    time_extents: Optional[TimeExtents] = field(name="time-extents", default=None)


class Measurement(Struct):
    instant: str
    id: CwmsId
    number: str
    height_unit: Optional[str] = field(name="height-unit", default=None)
    flow_unit: Optional[str] = field(name="flow-unit", default=None)
    temp_unit: Optional[str] = field(name="temp-unit", default=None)
    velocity_unit: Optional[str] = field(name="velocity-unit", default=None)
    area_unit: Optional[str] = field(name="area-unit", default=None)
    used: Optional[bool] = None
    agency: Optional[str] = None
    party: Optional[str] = None
    wm_comments: Optional[str] = field(name="wm-comments", default=None)
    streamflow_measurement: Optional[StreamflowMeasurement] = field(
        name="streamflow-measurement", default=None
    )
    supplemental_streamflow_measurement: Optional[SupplementalStreamflowMeasurement] = (
        field(name="supplemental-streamflow-measurement", default=None)
    )
    usgs_measurement: Optional[UsgsMeasurement] = field(
        name="usgs-measurement", default=None
    )


class Pool(Struct):
    poolName: Optional[PoolNameType] = None
    projectId: Optional[str] = None
    bottomLevelId: Optional[str] = None
    topLevelId: Optional[str] = None
    implicit: Optional[bool] = None
    attribute: Optional[float] = None
    description: Optional[str] = None
    clobText: Optional[str] = None


class Pools(Struct):
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    pools: Optional[
        Annotated[List[Pool], Meta(description="List of retrieved pools")]
    ] = None
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class WaterUserContract(Struct):
    office_id: Annotated[str, Meta(description="Owning office of object.")] = field(
        name="office-id"
    )
    water_user: WaterUser = field(name="water-user")
    contract_id: CwmsId = field(name="contract-id")
    contract_type: LookupType = field(name="contract-type")
    contract_effective_date: str = field(name="contract-effective-date")
    contract_expiration_date: str = field(name="contract-expiration-date")
    contracted_storage: float = field(name="contracted-storage")
    initial_use_allocation: float = field(name="initial-use-allocation")
    future_use_allocation: float = field(name="future-use-allocation")
    storage_units_id: str = field(name="storage-units-id")
    future_use_percent_activated: float = field(name="future-use-percent-activated")
    total_alloc_percent_activated: float = field(name="total-alloc-percent-activated")
    pump_out_location: Optional[WaterSupplyPump] = field(
        name="pump-out-location", default=None
    )
    pump_out_below_location: Optional[WaterSupplyPump] = field(
        name="pump-out-below-location", default=None
    )
    pump_in_location: Optional[WaterSupplyPump] = field(
        name="pump-in-location", default=None
    )


class Lock(Struct):
    project_id: CwmsId = field(name="project-id")
    location: Location
    chamber_type: Optional[LookupType] = field(name="chamber-type", default=None)
    lock_width: Optional[float] = field(name="lock-width", default=None)
    lock_length: Optional[float] = field(name="lock-length", default=None)
    normal_lock_lift: Optional[float] = field(name="normal-lock-lift", default=None)
    maximum_lock_lift: Optional[float] = field(name="maximum-lock-lift", default=None)
    length_units: Optional[str] = field(name="length-units", default=None)
    volume_units: Optional[str] = field(name="volume-units", default=None)
    volume_per_lockage: Optional[float] = field(name="volume-per-lockage", default=None)
    minimum_draft: Optional[float] = field(name="minimum-draft", default=None)
    high_water_upper_pool_location_level: Optional[LockLocationLevelRef] = field(
        name="high-water-upper-pool-location-level", default=None
    )
    low_water_lower_pool_location_level: Optional[LockLocationLevelRef] = field(
        name="low-water-lower-pool-location-level", default=None
    )
    high_water_lower_pool_location_level: Optional[LockLocationLevelRef] = field(
        name="high-water-lower-pool-location-level", default=None
    )
    low_water_upper_pool_location_level: Optional[LockLocationLevelRef] = field(
        name="low-water-upper-pool-location-level", default=None
    )
    high_water_upper_pool_warning_level: Optional[float] = field(
        name="high-water-upper-pool-warning-level", default=None
    )
    high_water_lower_pool_warning_level: Optional[float] = field(
        name="high-water-lower-pool-warning-level", default=None
    )
    elevation_units: Optional[str] = field(name="elevation-units", default=None)


class TurbineChange(Struct):
    project_id: CwmsId = field(name="project-id")
    change_date: str = field(name="change-date")
    discharge_computation_type: LookupType = field(name="discharge-computation-type")
    reason_type: LookupType = field(name="reason-type")
    protected: Optional[bool] = None
    notes: Optional[str] = None
    new_total_discharge_override: Optional[float] = field(
        name="new-total-discharge-override", default=None
    )
    old_total_discharge_override: Optional[float] = field(
        name="old-total-discharge-override", default=None
    )
    discharge_units: Optional[str] = field(name="discharge-units", default=None)
    tailwater_elevation: Optional[float] = field(
        name="tailwater-elevation", default=None
    )
    elevation_units: Optional[str] = field(name="elevation-units", default=None)
    settings: Optional[List[TurbineSetting]] = None
    pool_elevation: Optional[float] = field(name="pool-elevation", default=None)


class GateChange(Struct):
    project_id: CwmsId = field(name="project-id")
    change_date: str = field(name="change-date")
    discharge_computation_type: LookupType = field(name="discharge-computation-type")
    reason_type: LookupType = field(name="reason-type")
    reference_elevation: Optional[float] = field(
        name="reference-elevation", default=None
    )
    pool_elevation: Optional[float] = field(name="pool-elevation", default=None)
    protected: Optional[bool] = None
    notes: Optional[str] = None
    type: Optional[str] = None
    new_total_discharge_override: Optional[float] = field(
        name="new-total-discharge-override", default=None
    )
    old_total_discharge_override: Optional[float] = field(
        name="old-total-discharge-override", default=None
    )
    discharge_units: Optional[str] = field(name="discharge-units", default=None)
    tailwater_elevation: Optional[float] = field(
        name="tailwater-elevation", default=None
    )
    elevation_units: Optional[str] = field(name="elevation-units", default=None)
    settings: Optional[List[GateSetting]] = None


class VirtualOutlet(Struct):
    project_id: CwmsId = field(name="project-id")
    virtual_outlet_id: CwmsId = field(name="virtual-outlet-id")
    virtual_records: Optional[List[VirtualOutletRecord]] = field(
        name="virtual-records", default=None
    )


class OfficeFormatV1(Struct):
    offices: Optional[OfficesFMT] = None


class CatalogEntry1(LocationCatalogEntry):
    office: Optional[str] = None


CatalogEntry = Union[CatalogEntry1, CatalogEntry2]


class Catalog(Struct):
    entries: Optional[List[CatalogEntry]] = None
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


# AbstractRatingMetadata = Annotated[
#     Union[
#         AbstractRatingMetadata1,
#         AbstractRatingMetadata2,
#         AbstractRatingMetadata3,
#         AbstractRatingMetadata4,
#         AbstractRatingMetadata5,
#     ],
#     Meta(description="Rating Metadata"),
# ]


# class RatingMetadata(Struct):
#     rating_spec: Optional[RatingSpec] = field(name="rating-spec", default=None)
#     ratings: Optional[List[AbstractRatingMetadata]] = None


class RatingMetadataList(Struct):
    next_page: Optional[
        Annotated[
            str,
            Meta(
                description="The cursor to the next page of data; null if there is no more data"
            ),
        ]
    ] = field(name="next-page", default=None)
    page: Optional[
        Annotated[str, Meta(description="The cursor to the current page of data")]
    ] = None
    page_size: Optional[
        Annotated[
            int,
            Meta(
                description="The number of records fetched per-page; this may be larger than the number of records actually retrieved"
            ),
        ]
    ] = field(name="page-size", default=None)
    # rating_metadata: Optional[List[RatingMetadata]] = field(
    #     name="rating-metadata", default=None
    # )
    total: Optional[
        Annotated[
            int,
            Meta(
                description="The total number of records retrieved; null or not present if not supported or unknown"
            ),
        ]
    ] = None


class ExpressionRating(Struct):
    expression: Optional[str] = None


class TableRating(Struct):
    in_range_method: Optional[str] = field(name="in-range-method", default=None)
    out_range_low_method: Optional[str] = field(
        name="out-range-low-method", default=None
    )
    out_range_high_method: Optional[str] = field(
        name="out-range-high-method", default=None
    )


class TransitionalRating(Struct):
    source_ratings: Optional[List[str]] = field(name="source-ratings", default=None)
    conditions: Optional[List[str]] = None
    evaluations: Optional[List[str]] = None


class VirtualRating(Struct):
    source_ratings: Optional[List[SourceRating]] = field(
        name="source-ratings", default=None
    )
    connections: Optional[str] = None


class AbstractRatingMetadata4(ExpressionRating):
    office_id: Optional[str] = field(name="office-id", default=None)
    rating_spec_id: Optional[str] = field(name="rating-spec-id", default=None)
    units_id: Optional[str] = field(name="units-id", default=None)
    active: Optional[bool] = None
    effective_date: Optional[str] = field(name="effective-date", default=None)
    create_date: Optional[str] = field(name="create-date", default=None)
    transition_date: Optional[str] = field(name="transition-date", default=None)
    description: Optional[str] = None
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )
    rating_type: Optional[str] = field(name="rating-type", default=None)


class AbstractRatingMetadata1(TableRating):
    office_id: Optional[str] = field(name="office-id", default=None)
    rating_spec_id: Optional[str] = field(name="rating-spec-id", default=None)
    units_id: Optional[str] = field(name="units-id", default=None)
    active: Optional[bool] = None
    effective_date: Optional[str] = field(name="effective-date", default=None)
    create_date: Optional[str] = field(name="create-date", default=None)
    transition_date: Optional[str] = field(name="transition-date", default=None)
    description: Optional[str] = None
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )
    rating_type: Optional[str] = field(name="rating-type", default=None)


class UsgsStreamRating(TableRating):
    pass


class AbstractRatingMetadata2(TransitionalRating):
    office_id: Optional[str] = field(name="office-id", default=None)
    rating_spec_id: Optional[str] = field(name="rating-spec-id", default=None)
    units_id: Optional[str] = field(name="units-id", default=None)
    active: Optional[bool] = None
    effective_date: Optional[str] = field(name="effective-date", default=None)
    create_date: Optional[str] = field(name="create-date", default=None)
    transition_date: Optional[str] = field(name="transition-date", default=None)
    description: Optional[str] = None
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )
    rating_type: Optional[str] = field(name="rating-type", default=None)


class AbstractRatingMetadata3(VirtualRating):
    office_id: Optional[str] = field(name="office-id", default=None)
    rating_spec_id: Optional[str] = field(name="rating-spec-id", default=None)
    units_id: Optional[str] = field(name="units-id", default=None)
    active: Optional[bool] = None
    effective_date: Optional[str] = field(name="effective-date", default=None)
    create_date: Optional[str] = field(name="create-date", default=None)
    transition_date: Optional[str] = field(name="transition-date", default=None)
    description: Optional[str] = None
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )
    rating_type: Optional[str] = field(name="rating-type", default=None)


class AbstractRatingMetadata5(UsgsStreamRating):
    office_id: Optional[str] = field(name="office-id", default=None)
    rating_spec_id: Optional[str] = field(name="rating-spec-id", default=None)
    units_id: Optional[str] = field(name="units-id", default=None)
    active: Optional[bool] = None
    effective_date: Optional[str] = field(name="effective-date", default=None)
    create_date: Optional[str] = field(name="create-date", default=None)
    transition_date: Optional[str] = field(name="transition-date", default=None)
    description: Optional[str] = None
    vertical_datum_info: Optional[VerticalDatumInfo] = field(
        name="vertical-datum-info", default=None
    )
    rating_type: Optional[str] = field(name="rating-type", default=None)
